---
title: "404"
---

```{ojs}
//| echo: false

chart = {

    const colorScale = d3.scaleOrdinal(d3.schemeSpectral[11])
        .domain([0, keys.length])

  // Create the SVG container.
  const svg = d3.create("svg")
      .attr("width", width)
      .attr("height", height)
      .attr("viewBox", [0, 0, width, height])
      .attr("style", "max-width: 100%; height: auto;");

  // Append a group for each series, and a rect for each element in the series.
  svg.append("g")
    .selectAll()
    .data(series)
    .enter()
    .append('path')
        .style('fill', (d,i) => colorScale(i - 1))
        .style('stroke', 'black')
        .attr('d', area)

  return svg.node();
}
```



```{ojs}
//| echo: false

yaml = require('js-yaml')
projaml = FileAttachment('./projects.yaml').text()
confyaml = FileAttachment('./conference.yaml').text()

towns = FileAttachment('towns.json').json()

conf_data = yaml.load(confyaml).map((d) => ({
  name : d.title,
  town: d.town,
  coordinates : towns.find((t) => (t.name == d.town)).coordinates,
  region : towns.find((t) => (t.name == d.town)).region,
  type: 'conference',
  year: d.year,
  end: d.end,
  days: d.days

}))
sorted_c = conf_data.sort(d => d.end)

raw_points = [].concat(
conf_data,
yaml.load(projaml).map((d) => ({
  name : d.name,
  town: d.town,
  coordinates : towns.find((t) => (t.name == d.town)).coordinates,
  region : towns.find((t) => (t.name == d.town)).region,
  type: 'project',
  year: d.year,
  end: d.end,
  url: d.url

}))
)

gathered_points = raw_points.sort((d) => (d.end, d.name))

```

```{ojs}
//| echo: false


sorted = raw_points.sort(d => (d.year))
pre_timeline = Array.from(d3.group(sorted, d=> d.year))

function ark(){
    let data = []
    let omega = raw_points.map(d => d.year).sort(d => d)[0]
    let alpha = raw_points.map(d => d.end).sort(d => -d)[0]

    console.log(alpha, omega)

    for (let start_year of pre_timeline) {
        for (let x = alpha ; x <= omega; x++ ){
            // console.log(start_year)
            let year = start_year[0]
            // console.log('from', year, 'to',  end)
            let row = {
                label: `y${year}`,
                year: x,
                cnt: start_year[1].filter(d => d.year <= x & d.end >= x).length
                }
            data.push(row)
        }
    }
    return data
}


data = ark()


data
```

```{ojs}
keys = d3.union(data.map(d => d.label))
keys
```


```{ojs}

years = Array.from(d3.union(data.map(d => d.year)))
years
```



```{ojs}
{
    const series = d3.stack()
    .keys(d3.union(data.map(d => d.label))) // apples, bananas, cherries, â€¦
    .value(([, group], key) => group.get(key).cnt)
  (d3.index(data, d => d.year, d => d.label));
  return series
}

```




```{ojs}

series = d3.stack()
    .keys(keys)
    .value(([, D], key) => D.get(key).cnt)
    (d3.index(data, d=> d.year, d => d.label))

series
```


```{ojs}
width = 928;
height = 500;
marginTop = 10;
marginRight = 10;
marginBottom = 20;
marginLeft = 40;

x = d3.scaleLinear()
        .domain([2001, 2026])
        .range([marginLeft, width - marginRight])

y = d3.scaleLinear()
      .domain([0, d3.max(series, d => d3.max(d, d => d[1]))])
      .rangeRound([height - marginBottom, marginTop]);

area = d3.area((d,i) => x(years[i]))
    .y0(d => y(d[0]))
    .y1(d => x(d[1]))
    .curve(d3.curveMonotoneX)


```
