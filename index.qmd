---
title: "Digital History"
toc: true
theme: flatly
---

This is a Quarto website.

To learn more about Quarto websites visit <https://quarto.org/docs/websites>.


```{ojs}
//| echo: false

d3 = require("d3")
topojson = require("topojson")
```

# Projects



# Conference

```{ojs}
//| echo: false

geoswe = fetch("https://raw.githubusercontent.com/jnordgren/swedish_data_map_geojson/refs/heads/master/GeoJSON/swedish_provinces.geojson").then((response) => response.json())

```


```{ojs}
viewof w = Inputs.range([10,20], {value: 15.35045711798} )
viewof h = Inputs.range([64,67], {value: 65.3230300391815})
viewof z = Inputs.range([200, 1700], {value: 1457.07444492817})
viewof y = Inputs.range([2018, 2025], {value: 2018, step: 1})


```

```{ojs}
//| echo: false

markers = [
  {
    "type": "Feature",
    "geometry": {
      "type": "Point",
      "coordinates": [
        w,
        h
      ]
    }
  }
]
```

```{ojs}
//| echo: false

map = {
  const chartWidth = 400;
  const chartHeight = 800;
  const backgroundColor = "#EAF2FA";
  const landColor = "#09A573";
  const landStroke = "#FCF5E9";
  const markerColor = "#E26F99";

  const projection = d3.geoMercator()
                      .scale([z])
                      .center(markers[0].geometry.coordinates)
                      .translate([chartWidth / 3, chartHeight / 3]);

  const pathGenerator = d3.geoPath(projection);

  const svg = d3.create('svg')
                .attr("title", "Map")
                .attr('width', chartWidth)
                .attr('height', chartHeight)

  svg.append("rect")
    .attr("width", chartWidth)
    .attr("height", chartHeight)
    .attr('fill', backgroundColor);

  svg.selectAll('path')
        .data(geoswe.features)
        .join('path')
        .attr('d', pathGenerator)
        .attr('fill', landColor)
        .attr('stroke', landStroke)
        .attr('stroke-width', 1);

  svg.selectAll('path2')
        .data(geoswe.features.filter((d) => d.properties.name == "Halland"))
        .join('path')
        .attr('d', pathGenerator)
        .attr('fill', 'red')
        .attr('stroke', 'black')
        .attr('stroke-width', 1).append('title').text('Halland');


  // svg.selectAll("circle")
  //   .data(markers)
  //   .join("circle")
  //   .attr("cx", d => projection(d.geometry.coordinates)[0])
  //   .attr("cy", d => projection(d.geometry.coordinates)[1])
  //   .attr("r", 4)
  //   .attr("fill-opacity", 0.5)
  //   .attr("fill", markerColor)
  //   .attr("stroke", markerColor).append('title').text('lark');

  svg.selectAll('circle')
  .data(points)
  .enter()
  .append('circle')
  .attr("cx", d => projection(d.coordinates)[0])
  .attr("cy", d => projection(d.coordinates)[1])
  .attr("r", 5)
    .attr("fill-opacity", 0.9)
    .attr("fill", 'blue')
    .attr("stroke", markerColor).append('title').text(d => d.name );

  return svg.node();
}

```


### yaml test


```{ojs}
//| echo: false

yaml = require('js-yaml')
projaml = FileAttachment('./projects.yaml').text()
confyaml = FileAttachment('./conferences.yaml').text()

towns = FileAttachment('towns.json').json()


raw_points = [].concat(
yaml.load(confyaml).map((d) => ({
  name : d.name,
  region: d.region,
  coordinates : towns.find((t) => (t.name == d.region)).coordinates,
  type: 'conference',
  year: d.year
})),
yaml.load(projaml).map((d) => ({
  name : d.name,
  region: d.region,
  coordinates : towns.find((t) => (t.name == d.region)).coordinates,
  type: 'project',
  year: d.year

}))
)

raw_points

points = raw_points.filter((d) => (d.year >= y || d.type == 'project'))

points
```
